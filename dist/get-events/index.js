import e from"ydb-sdk";import{z as n}from"zod";function t(e,n,t,i){return new(t||(t=Promise))((function(r,o){function s(e){try{a(i.next(e))}catch(e){o(e)}}function d(e){try{a(i.throw(e))}catch(e){o(e)}}function a(e){var n;e.done?r(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(s,d)}a((i=i.apply(e,n||[])).next())}))}"function"==typeof SuppressedError&&SuppressedError;const{Driver:i,TypedData:r,getCredentialsFromEnv:o,getLogger:s}=e,d=e=>r.createNativeObjects(e),a=e=>t(void 0,void 0,void 0,(function*(){const n=s({level:"debug"}),r=(()=>{const e=process.env.DB_ENDPOINT,n=process.env.DB_DATABASE,t=o();return new i({endpoint:e,database:n,authService:t})})();if(!(yield r.ready(1e4))){const e="Driver has not become ready in 10 seconds!";throw n.fatal(e),new Error(e)}const a=yield r.tableClient.withSession((n=>t(void 0,void 0,void 0,(function*(){var t;const i=yield n.prepareQuery(e);return(null!==(t=(yield n.executeQuery(i)).resultSets)&&void 0!==t?t:[]).map(d)}))));return r.destroy(),a})),u=n.object({is_me:n.boolean(),is_favorite:n.boolean(),limit:n.number(),offset:n.number()}),_=e=>`\n    DECLARE $user_id AS String;\n\n    $user_id = "${e}";\n    SELECT event_id FROM favorite_user_event \n    WHERE user_id = $user_id \n`,c=e=>`\n    DECLARE $event_id AS String;\n\n    $event_id = "${e}";\n\n    SELECT t.* FROM \`tag\` as t \n    Left Join \`event_tag\` as ct\n    On t.tag_id = ct.tag_id\n    WHERE event_id = $event_id;\n`,v=function(e,n){return t(this,void 0,void 0,(function*(){const n={};n.limit=Number(e.queryStringParameters.limit.toString()),n.offset=Number(e.queryStringParameters.offset.toString());const t=Number(e.queryStringParameters.is_me.toString());n.is_me=0!=t;const i=Number(e.queryStringParameters.is_favorite.toString());n.is_favorite=0!=i,console.log(n);const r=u.parse(n),o=atob(e.headers.Authorization.split(" ")[1]).split(":"),s=(d=o[0],v=o[1],`\n    DECLARE $login AS String;\n    DECLARE $password AS String;\n\n    $login = "${d}";\n    $password = "${v}";\n\n    SELECT user_id FROM auth \n    WHERE login = $login \n    AND password = $password\n`);var d,v;const E=yield a(s),f=(({user_id:e,community_id:n,limit:t=20,offset:i=0})=>`\n    DECLARE $limit AS Uint32;\n    DECLARE $offset AS Uint32;\n    DECLARE $user_id AS String;\n    DECLARE $community_id AS String;\n\n    $user_id = "${e||""}";\n    $community_id = "${n||""}";\n    $limit = ${t};\n    $offset = ${i};\n\n    SELECT distinct e.* FROM event as e\n    Left Join event_community as ec\n    On e.event_id = ec.event_id\n    Left Join participants as p\n    On e.event_id = p.event_id\n    Left Join event_status as s\n    On e.event_id = s.event_id\n    WHERE\n        IF ($community_id = "", true, ec.community_id = $community_id)\n        AND IF ($user_id = "", true, p.user_id = $user_id)\n        AND date > "2024-1-23"\n        AND s.status = "confirm"\n    ORDER BY date ASC\n    LIMIT $limit\n    OFFSET $offset;\n`)(r),g=yield a(f),l=[];console.log(g);for(const e of g[0]){const n=`\n    DECLARE $event_id AS String;\n\n    $event_id = "${e.event_id}";\n\n    SELECT  u.user_id as user_id, name  FROM \`users\` as u\n    Left join \`participants\` as p\n    On u.user_id = p.user_id\n    WHERE event_id = $event_id\n`,t=yield a(n),i=c(e.event_id),o=yield a(i);e.tags={},e.tags.data=o[0],e.tags.count=o[0].length;const s=`\n    DECLARE $user_id AS String;\n\n    $user_id = "${e.organizer_id}";\n\n    SELECT * FROM users \n    WHERE user_id = $user_id\n`,d=yield a(s);delete e.organizer_id,e.organizer=d[0][0];const u=_(E[0][0].user_id),v=yield a(u);e.isFavorite=!1,e.isJoin=!1,e.image="https://storage.yandexcloud.net/balaganimg/event/"+e.event_id+".png";for(const n of v[0])if(e.isFavorite=String(e.event_id)==String(n.event_id),e.isFavorite)break;if(e.isFavorite||!r.is_favorite){for(const n of t[0])if(e.isJoin=String(E[0][0].user_id)==String(n.user_id),e.isJoin)break;!e.isJoin&&r.is_me||l.push(e)}}let m=l.length;if(!r.is_me&&!r.is_favorite){const e="\n    DECLARE $user_id AS String;\n    SELECT Count(event_id) FROM event\n";m=(yield a(e))[0][0].column0}return{statusCode:200,body:JSON.stringify({data:l,count:m})}}))};export{v as handler};
