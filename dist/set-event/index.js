import n from"ydb-sdk";import{z as e}from"zod";function t(n,e,t,i){return new(t||(t=Promise))((function(r,o){function s(n){try{d(i.next(n))}catch(n){o(n)}}function a(n){try{d(i.throw(n))}catch(n){o(n)}}function d(n){var e;n.done?r(n.value):(e=n.value,e instanceof t?e:new t((function(n){n(e)}))).then(s,a)}d((i=i.apply(n,e||[])).next())}))}"function"==typeof SuppressedError&&SuppressedError;const{Driver:i,TypedData:r,getCredentialsFromEnv:o,getLogger:s}=n,a=n=>r.createNativeObjects(n),d=n=>t(void 0,void 0,void 0,(function*(){const e=s({level:"debug"}),r=(()=>{const n=process.env.DB_ENDPOINT,e=process.env.DB_DATABASE,t=o();return new i({endpoint:n,database:e,authService:t})})();if(!(yield r.ready(1e4))){const n="Driver has not become ready in 10 seconds!";throw e.fatal(n),new Error(n)}const d=yield r.tableClient.withSession((e=>t(void 0,void 0,void 0,(function*(){var t;const i=yield e.prepareQuery(n);return(null!==(t=(yield e.executeQuery(i)).resultSets)&&void 0!==t?t:[]).map(a)}))));return r.destroy(),d})),c=e.object({name:e.string(),description:e.string(),place:e.string(),date:e.string(),time:e.string(),url:e.string().optional(),price:e.number(),tags:e.array(e.string())}),$=function(n,e){return t(this,void 0,void 0,(function*(){const t=c.parse(e.getPayload()),i=atob(n.headers.Authorization.split(" ")[1]).split(":"),r=(o=i[0],s=i[1],`\n    DECLARE $login AS String;\n    DECLARE $password AS String;\n\n    $login = "${o}";\n    $password = "${s}";\n\n    SELECT user_id FROM auth \n    WHERE login = $login \n    AND password = $password\n`);var o,s;const a=yield d(r);console.log(a[0][0].user_id),console.log(a[0].user_id);const[$]=yield d("\n    DECLARE $password AS String;\n    SELECT MAX(event_id) FROM event\n"),l=Number($[0].column0)+1,u=((n,e,{name:t,description:i,place:r,price:o,url:s,time:a,date:d})=>`\n    DECLARE $event_id AS String;\n    DECLARE $organizer_id AS String;\n    DECLARE $name AS String;\n    DECLARE $description AS String;\n    DECLARE $place AS String;\n    DECLARE $url AS String;\n    DECLARE $date AS String;\n    DECLARE $time AS String;\n    DECLARE $price AS Int;\n    DECLARE $visible AS Bool;\n\n    $event_id = "${n}";\n    $organizer_id = "${e}";\n    $name = "${t}";\n    $description = "${i}";\n    $place = "${r}";\n    $price = ${o};\n    $date = "${d}";\n    $time = "${a}";\n    $url = "${s}";\n    \n    UPSERT INTO event (event_id, organizer_id, name, description, place, price, url, time, visible, date)\n    Values ($event_id, $organizer_id, $name, $description, $place, $price, $url, $time, false, $date);\n    UPSERT INTO event_status (event_id, status)\n    Values ($event_id, "check")\n`)(l,a[0][0].user_id,t);yield d(u);for(const n of t.tags){const e=`\n    DECLARE $tag_id AS String;\n    DECLARE $event_id AS String;\n\n    $event_id = "${l}";\n    $tag_id = "${n}";\n    \n    UPSERT INTO event_tag (event_id, tag_id)\n    Values ($event_id, $tag_id)\n`;yield d(e)}return{statusCode:200,body:"Ok"}}))};export{$ as handler};
