import n from"ydb-sdk";import{z as i}from"zod";function e(n,i,e,o){return new(e||(e=Promise))((function(t,r){function s(n){try{c(o.next(n))}catch(n){r(n)}}function d(n){try{c(o.throw(n))}catch(n){r(n)}}function c(n){var i;n.done?t(n.value):(i=n.value,i instanceof e?i:new e((function(n){n(i)}))).then(s,d)}c((o=o.apply(n,i||[])).next())}))}"function"==typeof SuppressedError&&SuppressedError;const{Driver:o,TypedData:t,getCredentialsFromEnv:r,getLogger:s}=n,d=n=>t.createNativeObjects(n),c=n=>e(void 0,void 0,void 0,(function*(){const i=s({level:"debug"}),t=(()=>{const n=process.env.DB_ENDPOINT,i=process.env.DB_DATABASE,e=r();return new o({endpoint:n,database:i,authService:e})})();if(!(yield t.ready(1e4))){const n="Driver has not become ready in 10 seconds!";throw i.fatal(n),new Error(n)}const c=yield t.tableClient.withSession((i=>e(void 0,void 0,void 0,(function*(){var e;const o=yield i.prepareQuery(n);return(null!==(e=(yield i.executeQuery(o)).resultSets)&&void 0!==e?e:[]).map(d)}))));return t.destroy(),c})),a=i.object({name:i.string(),description:i.string(),tags:i.array(i.string()),visible:i.boolean()}),u=function(n,i){return e(this,void 0,void 0,(function*(){const e=a.parse(i.getPayload());console.log(e.visible);const o=atob(n.headers.Authorization.split(" ")[1]).split(":"),t=(r=o[0],s=o[1],`\n    DECLARE $login AS String;\n    DECLARE $password AS String;\n\n    $login = "${r}";\n    $password = "${s}";\n\n    SELECT user_id FROM auth \n    WHERE login = $login \n    AND password = $password\n`);var r,s;const d=yield c(t);console.log(d[0][0].user_id),console.log(d[0].user_id);const[u]=yield c("\n    DECLARE $password AS String;\n    SELECT MAX(community_id) FROM community\n    where length(community_id) = 2 \n"),l=Number(u[0].column0)+1;console.log(l),console.log(d[0][0].user_id);const m=((n,i,{name:e,description:o,visible:t})=>`\n    DECLARE $community_id AS String;\n    DECLARE $organizer_id AS String;\n    DECLARE $name AS String;\n    DECLARE $description AS String;\n    DECLARE $visible AS Bool;\n\n    $community_id = "${n}";\n    $organizer_id = "${i}";\n    $name = "${e}";\n    $description = "${o}";\n    $visible = ${t};\n    \n    UPSERT INTO community (community_id, organizer_id, name, description, visible)\n    Values ($community_id, $organizer_id, $name, $description, $visible)\n`)(l,d[0][0].user_id,e);yield c(m);for(const n of e.tags){const i=`\n    DECLARE $tag_id AS String;\n    DECLARE $community_id AS String;\n\n    $community_id = "${l}";\n    $tag_id = "${n}";\n    \n    UPSERT INTO community_tag (community_id, tag_id)\n    Values ($community_id, $tag_id)\n`;yield c(i)}return{statusCode:200,body:"Ok"}}))};export{u as handler};
